type Page {
    id: ID
    title: String
    description: String
    color: ColorEnum
    content: String
    image: String
    image_alt: String
    image_title: String
    slug: String
    meta_title: String
    meta_description: String
    seo_title: String
    seo_description: String
    benefits: [Benefit]
    benefits_title: String
    benefits_description: String
    faqs: [Faq]
    blocks: [Block]
    feedbacks: [Feedback]
    sliders: [Slider]
}
type Faq {
    question: String
    answer: String
    image: String
}
type MaterialBanner {
    id: Int
    image_desktop: String
    image_mobile: String
    image_alt: String
    title: String
    description: String
}
type Banner {
    title: String
    description: String
    promocode_discount: Int
    promocode: String
    link: String
    image: String
    image_alt: String
    image_title: String
}
type Benefit {
    title: String
    description: String
}

type Slider {
    name: String
    status: Boolean
    with_category: Boolean
    pages: [Page]
}

type Gallery {
    id: ID
    name: String
    slug: String
    type: String
    gallery: [String]
}

type Footer {
    name: String
    slug: String
    #    children: [Footer]
    #    page: Page
    pages: [Page]
}

type Sidebar {
    name: String
    slug: String
    #    children: [Sidebar]
    pages: [Page]
    #    pages: [Page]
    #    main_slug: String
}

enum ColorEnum {
    ORANGE
    GREEN
    BLUE
    RED
}


input PageInput {
    slug: String @rules(apply: ["required", "string", "exists:pages,slug"])
}

input FeedbackInput {
    first_name: String
    phone: String
    email: String
    message: String
    i_agree: Boolean
}

type Query {
    page(input: PageInput! @spread): Page @field(resolver: "Modules\\Pages\\GraphQL\\Queries\\Page")
}


